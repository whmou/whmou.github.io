I"[<h4 id="--what">- What:</h4>
<ol>
  <li>Used particularly in functional programming languages.</li>
  <li>Chances to increase performance by not doing the computation until needed.</li>
  <li>Has book-keeping overhead.</li>
  <li>May cause deadlock when two lazy value cross referenced.</li>
</ol>

<h4 id="--when">- When:</h4>
<ol>
  <li>Partial accessing a large set of data
    <ul>
      <li>ex: iterator.next() instead of getAll().get(n)</li>
    </ul>
  </li>
  <li>You want something to be initialized only once (exmaple below)
    <h4 id="--examples">- Examples:</h4>
    <ul>
      <li>
        <h5 id="delay-of-evaluation---test-it-online">Delay of evaluation - <a href="https://scalafiddle.io/sf/vTKxL29/0">[test it online]</a></h5>
        <div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">val</span> <span class="nv">x</span> <span class="k">=</span> <span class="o">{</span> <span class="nf">println</span> <span class="o">(</span><span class="s">"doncic"</span><span class="o">)</span> <span class="o">;</span> <span class="mi">77</span> <span class="o">}</span>
<span class="nf">println</span> <span class="o">(</span><span class="s">"luka"</span><span class="o">)</span>
<span class="nf">println</span> <span class="o">(</span><span class="n">x</span><span class="o">)</span>
</code></pre></div>        </div>
        <p>prints: doncic, then luka then 77.</p>
        <div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">lazy</span> <span class="k">val</span> <span class="nv">y</span> <span class="k">=</span> <span class="o">{</span> <span class="nf">println</span> <span class="o">(</span><span class="s">"doncic"</span><span class="o">)</span> <span class="o">;</span> <span class="mi">77</span> <span class="o">}</span>
<span class="nf">println</span> <span class="o">(</span><span class="s">"luka"</span><span class="o">)</span>
<span class="nf">println</span> <span class="o">(</span><span class="n">y</span><span class="o">)</span>
</code></pre></div>        </div>
        <p>prints: luka, then doncic then 77.</p>
      </li>
    </ul>
  </li>
</ol>

<ul>
  <li>
    <h5 id="you-want-something-to-be-initialized-once---test-it-online">You want something to be initialized once: - <a href="https://scalafiddle.io/sf/hah3GWH/0">[test it online]</a></h5>
    <div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Doncic</span> <span class="o">{</span>
  <span class="k">def</span> <span class="nf">doInit</span><span class="o">()</span> <span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
      <span class="nf">println</span><span class="o">(</span><span class="s">"Hello Basketball"</span><span class="o">)</span>
      <span class="mi">77</span>
  <span class="o">}</span>
  <span class="k">lazy</span> <span class="k">val</span> <span class="nv">x</span> <span class="k">=</span> <span class="nf">doInit</span><span class="o">()</span>
  <span class="k">def</span> <span class="nf">dribbling</span><span class="o">()</span> <span class="o">{</span>
      <span class="nf">println</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="k">val</span> <span class="nv">luka</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Doncic</span>
<span class="nv">luka</span><span class="o">.</span><span class="py">dribbling</span><span class="o">()</span>
<span class="nv">luka</span><span class="o">.</span><span class="py">dribbling</span><span class="o">()</span>
<span class="nv">luka</span><span class="o">.</span><span class="py">dribbling</span><span class="o">()</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>Outputs:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello Basketball
77
77
77
</code></pre></div></div>
<p>You can see the “Hello Basketball” will be called only once, 
so when it’s something heavy computation, 
you know it’s going to save sometime when it’s applicable.</p>

<ul>
  <li>
    <h5 id="deadlock--to-do-have-an-example-for-the-deadlock">Deadlock : [To-Do] Have an example for the deadlock</h5>
  </li>
</ul>

<hr />

<h5 id="--references">- References:</h5>
<p><a href="http://matt.might.net/articles/implementing-laziness/">http://matt.might.net/articles/implementing-laziness/</a>
<a href="https://en.wikipedia.org/wiki/Lazy_evaluation">https://en.wikipedia.org/wiki/Lazy_evaluation</a>
<a href="https://stackoverflow.com/questions/19955995/when-to-use-lazy-values-in-scala">https://stackoverflow.com/questions/19955995/when-to-use-lazy-values-in-scala</a>
<a href="https://stackoverflow.com/questions/19469464/do-something-only-once-without-state">https://stackoverflow.com/questions/19469464/do-something-only-once-without-state</a>
<a href="http://twitter.github.io/effectivescala/#Functional%20programming-Laziness">http://twitter.github.io/effectivescala/#Functional%20programming-Laziness</a></p>
:ET