I"<h4 id="--what">- What:</h4>
<ol>
  <li>Used particularly in functional programming languages.</li>
  <li>Chances to increase performance by not doing the computation until needed.</li>
  <li>Has book-keeping overhead.</li>
  <li>May cause deadlock when two lazy value cross referenced.</li>
</ol>

<h4 id="--when">- When:</h4>
<ol>
  <li>Partial accessing a large set of data
    <ul>
      <li>ex: iterator.next() instead of getAll().get(n)</li>
    </ul>
  </li>
  <li>You want something to be initialized only once (exmaple below)
    <h4 id="--examples">- Examples:</h4>
    <ul>
      <li>
        <h5 id="delay-of-evaluation---test-it-online">Delay of evaluation - <a href="https://scalafiddle.io/sf/vTKxL29/0">[test it online]</a></h5>
        <div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">val</span> <span class="nv">x</span> <span class="k">=</span> <span class="o">{</span> <span class="nf">println</span> <span class="o">(</span><span class="s">"doncic"</span><span class="o">)</span> <span class="o">;</span> <span class="mi">77</span> <span class="o">}</span>
<span class="nf">println</span> <span class="o">(</span><span class="s">"luka"</span><span class="o">)</span>
<span class="nf">println</span> <span class="o">(</span><span class="n">x</span><span class="o">)</span>
</code></pre></div>        </div>
        <p>prints: doncic, then luka then 77.</p>
        <div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">lazy</span> <span class="k">val</span> <span class="nv">y</span> <span class="k">=</span> <span class="o">{</span> <span class="nf">println</span> <span class="o">(</span><span class="s">"doncic"</span><span class="o">)</span> <span class="o">;</span> <span class="mi">77</span> <span class="o">}</span>
<span class="nf">println</span> <span class="o">(</span><span class="s">"luka"</span><span class="o">)</span>
<span class="nf">println</span> <span class="o">(</span><span class="n">y</span><span class="o">)</span>
</code></pre></div>        </div>
        <p>prints: luka, then doncic then 77.</p>
      </li>
    </ul>
  </li>
</ol>

<ul>
  <li>
    <h5 id="you-want-something-to-be-initialized-once---test-it-online">You want something to be initialized once: - <a href="https://scalafiddle.io/sf/hah3GWH/0">[test it online]</a></h5>
    <p>```scala
class Doncic {
  def doInit() : Int = {
      println(‚ÄúHello Basketball‚Äù)
      77
  }
  lazy val x = doInit()
  def dribbling() {
      println(x)
  }
}</p>
  </li>
</ul>

<p>val luka = new Doncic
 luka.dribbling()
 luka.dribbling()
 luka.dribbling()</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ---
Outputs:
```bash

Hello Basketball
77
77
77
</code></pre></div></div>
<p>You can see the ‚ÄúHello Basketball‚Äù will be called only once, 
so when it‚Äôs something heavy computation, 
you know it‚Äôs going to save sometime when it‚Äôs applicable.</p>

<ul>
  <li>
    <h5 id="deadlock--to-do-have-an-example-for-the-deadlock">Deadlock : [To-Do] Have an example for the deadlock</h5>
  </li>
</ul>

<hr />

<h5 id="--references">- References:</h5>
<p>http://matt.might.net/articles/implementing-laziness/<br />
https://en.wikipedia.org/wiki/Lazy_evaluation<br />
https://stackoverflow.com/questions/19955995/when-to-use-lazy-values-in-scala<br />
https://stackoverflow.com/questions/19469464/do-something-only-once-without-state<br />
http://twitter.github.io/effectivescala/#Functional%20programming-Laziness</p>
:ET